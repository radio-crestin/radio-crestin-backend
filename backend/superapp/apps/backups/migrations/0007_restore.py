# Generated by Django 5.1.9 on 2025-05-22 11:29

import django.db.models.deletion
import django_multitenant.fields
import django_multitenant.mixins
import django_multitenant.models
import superapp.apps.backups.storage
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('backups', '0006_alter_backup_tenant'),
        ('easywindow', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Restore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Name')),
                ('file', models.FileField(blank=True, null=True, storage=superapp.apps.backups.storage.PrivateBackupStorage, upload_to='restores/', verbose_name='File')),
                ('done', models.BooleanField(default=False, verbose_name='Done')),
                ('started_at', models.DateTimeField(blank=True, null=True, verbose_name='Started at')),
                ('finished_at', models.DateTimeField(blank=True, null=True, verbose_name='Finished at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('backup', models.ForeignKey(blank=True, help_text='Optional. If selected, backup file path will override the file field.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='restores', to='backups.backup', verbose_name='Backup')),
                ('tenant', django_multitenant.fields.TenantForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='restores', to='easywindow.organization')),
            ],
            options={
                'verbose_name': 'Restore',
                'verbose_name_plural': 'Restores',
                'ordering': ['-created_at'],
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
            managers=[
                ('objects', django_multitenant.models.TenantManager()),
            ],
        ),
    ]
