version: '3.6'
services:
  postgres:
    image: postgres:13
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
      timeout: 45s
      interval: 10s
      retries: 10
    networks:
      - app_network
    logging:
      driver: "json-file"
      options:
        max-file: "5"   # number of files or file count
        max-size: "100m" # file size
  app:
    build:
      context: backend/app
    depends_on:
      - graphql-engine
    restart: always
    env_file:
      - .env
    networks:
      - app_network
    logging:
      driver: "json-file"
      options:
        max-file: "5"   # number of files or file count
        max-size: "100m" # file size
  admin:
    build:
      context: backend/admin
    depends_on:
      - postgres
    restart: always
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/admin" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - app_network
    logging:
      driver: "json-file"
      options:
        max-file: "5"   # number of files or file count
        max-size: "100m" # file size
  graphql-engine:
    image: hasura/graphql-engine:v2.16.1.cli-migrations-v3
    depends_on:
      - postgres
    restart: always
    env_file:
      - .env
    volumes:
      - ./backend/migrations:/hasura-migrations/
      - ./backend/metadata:/hasura-metadata/
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/healthz" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - app_network
    logging:
      driver: "json-file"
      options:
        max-file: "5"   # number of files or file count
        max-size: "100m" # file size
  graphql-viewer:
    image: ghcr.io/iosifnicolae2/graphql-viewer:latest
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - app_network
    logging:
      driver: "json-file"
      options:
        max-file: "5"   # number of files or file count
        max-size: "100m" # file size
  frontend:
    build:
      context: frontend
      args:
        - FRONTEND_CDN_PREFIX=${FRONTEND_CDN_PREFIX}
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    environment:
      - FRONTEND_GRAPHQL_ENDPOINT_URI=${FRONTEND_GRAPHQL_ENDPOINT_URI}
      - FRONTEND_GRAPHQL_INTERNAL_ENDPOINT_URI=${FRONTEND_GRAPHQL_INTERNAL_ENDPOINT_URI}
      - FRONTEND_GRAPHQL_INTERNAL_ENDPOINT_ADMIN_SECRET=${FRONTEND_GRAPHQL_INTERNAL_ENDPOINT_ADMIN_SECRET}
      - FRONTEND_CDN_PREFIX=${FRONTEND_CDN_PREFIX}
      - FRONTEND_CDN_IMAGE_PREFIX=${FRONTEND_CDN_IMAGE_PREFIX}
    networks:
      - app_network
    logging:
      driver: "json-file"
      options:
        max-file: "5"   # number of files or file count
        max-size: "100m" # file size

  tor-proxy:
    image: dperson/torproxy
    restart: always
    environment:
      LOCATION: DE
    networks:
      - app_network
    logging:
      driver: "json-file"
      options:
        max-file: "5"   # number of files or file count
        max-size: "100m" # file size
  nginx:
    build:
      context: nginx
    restart: always
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/server.crt:/etc/nginx/server.crt
      - ./nginx/server.key:/etc/nginx/server.key
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/common.conf:/etc/nginx/common.conf
      - ./nginx/common_location.conf:/etc/nginx/common_location.conf
      - ./nginx/common_caching.conf:/etc/nginx/common_caching.conf
    networks:
      - app_network
    logging:
      driver: "json-file"
      options:
        max-file: "5"   # number of files or file count
        max-size: "100m" # file size
volumes:
  db_data:

networks:
  app_network:
    name: app_network_webgateway
