version: '3.6'
services:
  postgres:
    image: postgres:13
    restart: unless-stopped
    volumes:
      - db_data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
      timeout: 45s
      interval: 10s
      retries: 10
    networks:
      - app_network
    logging:
      driver: "json-file"
      options:
        max-file: "5"   # number of files or file count
        max-size: "100m" # file size
  app:
    build:
      context: backend/app
    depends_on:
      - graphql-engine
    restart: unless-stopped
    env_file:
      - .env
    networks:
      - app_network
    logging:
      driver: "json-file"
      options:
        max-file: "5"   # number of files or file count
        max-size: "100m" # file size
    deploy:
      resources:
        limits:
          memory: 300M
        reservations:
          memory: 80M
  auth:
    build:
      context: backend/auth
    depends_on:
      - graphql-engine
    restart: unless-stopped
    env_file:
      - .env
    networks:
      - app_network
    logging:
      driver: "json-file"
      options:
        max-file: "5"   # number of files or file count
        max-size: "100m" # file size
    deploy:
      resources:
        limits:
          memory: 300M
        reservations:
          memory: 80M
  admin:
    build:
      context: backend/admin
    depends_on:
      - postgres
    restart: unless-stopped
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/admin" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - app_network
    logging:
      driver: "json-file"
      options:
        max-file: "5"   # number of files or file count
        max-size: "100m" # file size
  graphql-engine:
    image: hasura/graphql-engine:v2.33.4.cli-migrations-v3
    depends_on:
      - postgres
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./backend/migrations:/hasura-migrations/
      - ./backend/metadata:/hasura-metadata/
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/healthz" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - app_network
    logging:
      driver: "json-file"
      options:
        max-file: "5"   # number of files or file count
        max-size: "100m" # file size
  graphql-viewer:
    image: ghcr.io/iosifnicolae2/graphql-viewer:latest
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - app_network
    logging:
      driver: "json-file"
      options:
        max-file: "5"   # number of files or file count
        max-size: "100m" # file size
  tor-proxy:
    image: dperson/torproxy
    restart: unless-stopped
    environment:
      LOCATION: DE
    networks:
      - app_network
    logging:
      driver: "json-file"
      options:
        max-file: "5"   # number of files or file count
        max-size: "100m" # file size
  nginx:
    build:
      context: nginx
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/server.crt:/etc/nginx/server.crt
      - ./nginx/server.key:/etc/nginx/server.key
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/common.conf:/etc/nginx/common.conf
      - ./nginx/common_location.conf:/etc/nginx/common_location.conf
      - ./nginx/common_caching.conf:/etc/nginx/common_caching.conf
    networks:
      - app_network
    logging:
      driver: "json-file"
      options:
        max-file: "5"   # number of files or file count
        max-size: "100m" # file size
  backend-hls-streaming:
    build:
      context: backend_hls_streaming
    depends_on:
      - graphql-engine
    restart: unless-stopped
    environment:
      - GRAPHQL_ENDPOINT=http://graphql-engine:8080/v1/graphql
      - GRAPHQL_TOKEN=${APP_GRAPHQL_ADMIN_SECRET}
      - LOG_LEVEL=INFO
      - STREAM_REFRESH_INTERVAL=60
      - BATCH_INTERVAL=10
      - NGINX_LOG_PATH=/var/log/nginx/ts_sessions.log
    volumes:
      - /tmp/data/hls:/data
      - ./backend_hls_streaming/logs:/var/log/nginx
    networks:
      - app_network
    logging:
      driver: "json-file"
      options:
        max-file: "5"   # number of files or file count
        max-size: "100m" # file size
    deploy:
      resources:
        limits:
          memory: 500M
        reservations:
          memory: 200M
volumes:
  db_data:

networks:
  app_network:
    name: app_network_webgateway
