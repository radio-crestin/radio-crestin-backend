# Generated by Django 5.1.11 on 2025-07-21 06:45

import django.utils.timezone
import guardian.mixins
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('password', models.CharField(blank=True, max_length=128, verbose_name='password')),
                ('anonymous_id', models.CharField(blank=True, max_length=512, null=True, unique=True, verbose_name='Anonymous ID')),
                ('anonymous_id_verified', models.DateTimeField(blank=True, null=True, verbose_name='Anonymous ID verified')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True, verbose_name='email address')),
                ('email_verified', models.DateTimeField(blank=True, null=True, verbose_name='Email verified')),
                ('phone_number', models.CharField(blank=True, max_length=255, null=True, unique=True, verbose_name='Phone number')),
                ('phone_number_verified', models.DateTimeField(blank=True, null=True, verbose_name='Phone number verified')),
                ('checkout_phone_number', models.CharField(blank=True, max_length=255, null=True, verbose_name='Checkout phone number')),
                ('photo_url', models.CharField(blank=True, max_length=255, null=True)),
                ('address', models.CharField(blank=True, max_length=1024, null=True)),
                ('is_staff', models.BooleanField(default=True, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='modified at')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'permissions': (('can_view_dashboard', 'Can view dashboard'), ('can_view_custom_page', 'Can view custom page'), ('is_normal_user', 'Is a normal user?')),
                'constraints': [models.UniqueConstraint(condition=models.Q(('anonymous_id', None), _negated=True), fields=('anonymous_id',), name='unique_anonymous_id'), models.UniqueConstraint(condition=models.Q(('email', None), _negated=True), fields=('email',), name='unique_email'), models.UniqueConstraint(condition=models.Q(('phone_number', None), _negated=True), fields=('phone_number',), name='unique_phone_number')],
            },
            bases=(models.Model, guardian.mixins.GuardianUserMixin),
        ),
    ]
